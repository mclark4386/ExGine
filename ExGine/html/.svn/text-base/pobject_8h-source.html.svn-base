<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>pobject.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>pobject.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef __POBJECT_H__</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define __POBJECT_H__</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include "base_elements.h"</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00006"></a>00006 <span class="comment">//for debug</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="keyword">typedef</span> std::vector&lt;Scalar&gt; varList;
<a name="l00010"></a>00010 
<a name="l00015"></a>00015 
<a name="l00016"></a><a class="code" href="classPObject.html">00016</a> <span class="keyword">class </span><a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>
<a name="l00017"></a>00017 {
<a name="l00018"></a>00018 <span class="keyword">public</span>:
<a name="l00019"></a>00019         <a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>(){};
<a name="l00020"></a><a class="code" href="classPObject.html#21d0fc7628b6f59bfa24caccff0de01a">00020</a>         <a class="code" href="classPObject.html#21d0fc7628b6f59bfa24caccff0de01a" title="default base constructer">~PObject</a>(){};
<a name="l00021"></a>00021         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classPObject.html#587e0263ce46133bf886729f890f9f2b" title="default base destructer">update</a>()=0;
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a>00032         <span class="keyword">virtual</span> Scalar <a class="code" href="classPObject.html#e1828c1830e8e9924ca4c560cbe2f933" title="pure virtual detect collision">detectCollision</a>(<a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>* <span class="keywordtype">object</span>)=0;
<a name="l00033"></a>00033         
<a name="l00040"></a>00040         <span class="keyword">virtual</span> varList <a class="code" href="classPObject.html#4def469478987ead107c777d31790092" title="pure virtual get Statistics for the object">getStats</a>()=0;
<a name="l00041"></a>00041         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classPObject.html#b838f7867acec8e4199947aaf51f9763" title="pure virtual set stats">setStats</a>(varList _stats)=0;
<a name="l00042"></a>00042         
<a name="l00043"></a>00043         Vector&lt;Scalar&gt; getPoM(){<span class="keywordflow">return</span> <a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>;};
<a name="l00044"></a><a class="code" href="classPObject.html#bdca63793b7e6e59b568d157f7c8142f">00044</a>         <span class="keywordtype">void</span> <a class="code" href="classPObject.html#bdca63793b7e6e59b568d157f7c8142f" title="get Point of Mass">setPoM</a>(Vector&lt;Scalar&gt; _PoM){<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a> = _PoM;};
<a name="l00045"></a><a class="code" href="classPObject.html#9aa1ffb42bf4077cf69d2c4c8f11e839">00045</a>         Scalar <a class="code" href="classPObject.html#9aa1ffb42bf4077cf69d2c4c8f11e839" title="set Point of Mass">getMass</a>(){<span class="keywordflow">return</span> <a class="code" href="classPObject.html#b431b6b513a0f702fbcacda37cf0f3d3" title="Mass.">mass</a>;};
<a name="l00046"></a><a class="code" href="classPObject.html#f5f14a756807d0971641ebcbfc3e09f6">00046</a>         <span class="keywordtype">void</span> <a class="code" href="classPObject.html#f5f14a756807d0971641ebcbfc3e09f6" title="get Mass">setMass</a>(Scalar _m){<a class="code" href="classPObject.html#b431b6b513a0f702fbcacda37cf0f3d3" title="Mass.">mass</a> = _m;};
<a name="l00047"></a><a class="code" href="classPObject.html#b129b61f46fa06b9c17b9427e9aa2c48">00047</a>         Vector&lt;Scalar&gt; <a class="code" href="classPObject.html#b129b61f46fa06b9c17b9427e9aa2c48" title="set Mass">getVelocity</a>(){<span class="keywordflow">return</span> <a class="code" href="classPObject.html#d4676288b887b76c23405b2d0d88b652" title="Velocity.">velocity</a>;};
<a name="l00048"></a><a class="code" href="classPObject.html#d74f0ee87f3c5ae65f6403d63d6f1598">00048</a>         <span class="keywordtype">void</span> <a class="code" href="classPObject.html#d74f0ee87f3c5ae65f6403d63d6f1598" title="get Velocity">setVelocity</a>(Vector&lt;Scalar&gt; _vel){<a class="code" href="classPObject.html#d4676288b887b76c23405b2d0d88b652" title="Velocity.">velocity</a> = _vel;};
<a name="l00049"></a><a class="code" href="classPObject.html#c336d4c39dade7245b02ff4c419626fb">00049</a>         Scalar <a class="code" href="classPObject.html#c336d4c39dade7245b02ff4c419626fb" title="set Velocity">getAccel</a>(){<span class="keywordflow">return</span> <a class="code" href="classPObject.html#3b27cd99ff41d8f17770b125f43ebc9c" title="Acceloration.">acceloration</a>;};
<a name="l00050"></a><a class="code" href="classPObject.html#f2741df535880f8487386e67a547c276">00050</a>         <span class="keywordtype">void</span> <a class="code" href="classPObject.html#f2741df535880f8487386e67a547c276" title="get Acceloration">setAccel</a>(Scalar _accel){<a class="code" href="classPObject.html#3b27cd99ff41d8f17770b125f43ebc9c" title="Acceloration.">acceloration</a> = _accel;};
<a name="l00051"></a><a class="code" href="classPObject.html#b89f4243fb28114546dee8a2247951ad">00051</a>         Scalar <a class="code" href="classPObject.html#b89f4243fb28114546dee8a2247951ad" title="set Acceloration">getMMoI</a>(){<span class="keywordflow">return</span> <a class="code" href="classPObject.html#39549ad19aaa12033ae1c2bba1098f34" title="Mass Moment of Inertia.">MassMomentOfInertia</a>;};
<a name="l00052"></a><a class="code" href="classPObject.html#5da6ef823f5791ede8b2a8cdc1fc18fb">00052</a>         <span class="keywordtype">void</span> <a class="code" href="classPObject.html#5da6ef823f5791ede8b2a8cdc1fc18fb" title="get Mass Moment of Inertia">setMMoI</a>(Scalar _mmoi){<a class="code" href="classPObject.html#39549ad19aaa12033ae1c2bba1098f34" title="Mass Moment of Inertia.">MassMomentOfInertia</a> = _mmoi;}; 
<a name="l00053"></a>00053 <span class="keyword">protected</span>:
<a name="l00054"></a>00054         Vector&lt;Scalar&gt; <a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>;
<a name="l00055"></a><a class="code" href="classPObject.html#b431b6b513a0f702fbcacda37cf0f3d3">00055</a>         Scalar <a class="code" href="classPObject.html#b431b6b513a0f702fbcacda37cf0f3d3" title="Mass.">mass</a>;
<a name="l00056"></a><a class="code" href="classPObject.html#d4676288b887b76c23405b2d0d88b652">00056</a>         Vector&lt;Scalar&gt; <a class="code" href="classPObject.html#d4676288b887b76c23405b2d0d88b652" title="Velocity.">velocity</a>;
<a name="l00057"></a><a class="code" href="classPObject.html#3b27cd99ff41d8f17770b125f43ebc9c">00057</a>         Scalar <a class="code" href="classPObject.html#3b27cd99ff41d8f17770b125f43ebc9c" title="Acceloration.">acceloration</a>;
<a name="l00058"></a><a class="code" href="classPObject.html#39549ad19aaa12033ae1c2bba1098f34">00058</a>         Scalar <a class="code" href="classPObject.html#39549ad19aaa12033ae1c2bba1098f34" title="Mass Moment of Inertia.">MassMomentOfInertia</a>;
<a name="l00059"></a>00059 };
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="classPOSphere.html">00068</a> <span class="keyword">class </span><a class="code" href="classPOSphere.html" title="Class for sphere Physics Objects.">POSphere</a>:<span class="keyword">public</span> <a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070 <span class="keyword">public</span>:
<a name="l00071"></a>00071         <a class="code" href="classPOSphere.html" title="Class for sphere Physics Objects.">POSphere</a>(){};
<a name="l00072"></a>00072         ~<a class="code" href="classPOSphere.html" title="Class for sphere Physics Objects.">POSphere</a>(){};
<a name="l00073"></a>00073         <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#17904f3eeceb2ba07931d6d359bbeebe" title="default base destructer">update</a>();
<a name="l00074"></a>00074         Scalar <a class="code" href="classPOSphere.html#798625bc33390f84032dd30b5abaa112" title="pure virtual detect collision">detectCollision</a>(<a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>* <span class="keywordtype">object</span>);
<a name="l00075"></a>00075         varList <a class="code" href="classPOSphere.html#cab4d5434c63870cd383d38eb985a4fd" title="pure virtual get Statistics for the object">getStats</a>();
<a name="l00076"></a>00076         <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#39a1a0d77b89ead931e6bef08d41bdd0" title="pure virtual set stats">setStats</a>(varList _stats);
<a name="l00077"></a>00077 <span class="keyword">protected</span>:
<a name="l00078"></a>00078         Scalar radius;
<a name="l00079"></a>00079 };
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="classPOSphere.html#17904f3eeceb2ba07931d6d359bbeebe">00081</a> <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#17904f3eeceb2ba07931d6d359bbeebe" title="default base destructer">POSphere::update</a>()
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classPOSphere.html#798625bc33390f84032dd30b5abaa112">00085</a> Scalar <a class="code" href="classPOSphere.html#798625bc33390f84032dd30b5abaa112" title="pure virtual detect collision">POSphere::detectCollision</a>(<a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>* <span class="keywordtype">object</span>)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087         varList temp = <span class="keywordtype">object</span>-&gt;getStats();
<a name="l00088"></a>00088         Vector&lt;Scalar&gt; otherPoM = <span class="keywordtype">object</span>-&gt;getPoM();
<a name="l00089"></a>00089         Scalar dist = 0.0;
<a name="l00090"></a>00090         
<a name="l00091"></a>00091         <span class="keywordflow">if</span> (temp[0] &gt; 0.999&amp;&amp;temp[0]&lt;1.001)<span class="comment">//if a Scalar "equal" to 1.0 it's a sphere too</span>
<a name="l00092"></a>00092         {
<a name="l00093"></a>00093                 dist = DIST(otherPoM.x,otherPoM.y,otherPoM.z,<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.x,<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.y,<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.z);
<a name="l00094"></a>00094                 
<a name="l00095"></a>00095                 std::clog&lt;&lt;<span class="stringliteral">"SvS r1:"</span>&lt;&lt;radius&lt;&lt;<span class="stringliteral">" r2:"</span>&lt;&lt;temp[1]&lt;&lt;<span class="stringliteral">" dist:"</span>&lt;&lt;dist&lt;&lt;std::endl;
<a name="l00096"></a>00096                 
<a name="l00097"></a>00097                 <span class="keywordflow">if</span> (dist&lt;=radius+temp[1])
<a name="l00098"></a>00098                         <span class="keywordflow">return</span> dist;
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (temp[0] &gt; 1.999&amp;&amp;temp[0]&lt;2.001)<span class="comment">//if a Scalar "equal" to 2.0 it's a plane too</span>
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102                 std::clog&lt;&lt;<span class="stringliteral">"SvP r1:"</span>&lt;&lt;radius&lt;&lt;<span class="stringliteral">" n:"</span>&lt;&lt;temp[1]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;temp[2]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;temp[3]&lt;&lt;<span class="stringliteral">" dist:"</span>&lt;&lt;dist&lt;&lt;std::endl;
<a name="l00103"></a>00103                 
<a name="l00104"></a>00104                 <span class="keywordflow">return</span> dist;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106         <span class="keywordflow">return</span> dist;
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classPOSphere.html#cab4d5434c63870cd383d38eb985a4fd">00109</a> varList <a class="code" href="classPOSphere.html#cab4d5434c63870cd383d38eb985a4fd" title="pure virtual get Statistics for the object">POSphere::getStats</a>()
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111         varList temp;
<a name="l00112"></a>00112         
<a name="l00113"></a>00113         temp.push_back(1.0);
<a name="l00114"></a>00114         temp.push_back(radius);
<a name="l00115"></a>00115         <span class="keywordflow">return</span> temp;
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a><a class="code" href="classPOSphere.html#39a1a0d77b89ead931e6bef08d41bdd0">00118</a> <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#39a1a0d77b89ead931e6bef08d41bdd0" title="pure virtual set stats">POSphere::setStats</a>(varList _stats)
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120         <span class="keywordflow">if</span>(_stats.size()&gt;=2)
<a name="l00121"></a>00121                 <span class="keywordflow">return</span>;
<a name="l00122"></a>00122         radius = _stats[1];
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment">/*</span>
<a name="l00126"></a>00126 <span class="comment"> *Ground Detection:</span>
<a name="l00127"></a>00127 <span class="comment"> * single plane(Point dot norm = d or Xnx +Yny+ Znz + -d = 0) = easy</span>
<a name="l00128"></a>00128 <span class="comment"> * just load 1point and the norm and you have the equation for the plane and can shoot a ray down from the PoM and do it that way...</span>
<a name="l00129"></a>00129 <span class="comment"> * dist = (d - PoM dot norm)/(dir{should be 0,-1,0} dot norm)</span>
<a name="l00130"></a>00130 <span class="comment"> * mesh terrain != easy</span>
<a name="l00131"></a>00131 <span class="comment"> * ... how do I want to do it? .... how should I detect a seperate poly?... </span>
<a name="l00132"></a>00132 <span class="comment"> * ...what if I loaded the mesh in and then didn't do that plane/intersect calcs till I determined which poly it was over and then only calcing off of it...</span>
<a name="l00133"></a>00133 <span class="comment"> * </span>
<a name="l00134"></a>00134 <span class="comment"> */</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 <span class="keyword">class </span>POPlane:<span class="keyword">public</span> <a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>
<a name="l00137"></a>00137 {
<a name="l00138"></a>00138 <span class="keyword">public</span>:
<a name="l00139"></a>00139         POPlane(){length = width = d = 0.0;};
<a name="l00140"></a>00140         ~POPlane(){};
<a name="l00141"></a>00141         <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#17904f3eeceb2ba07931d6d359bbeebe" title="default base destructer">update</a>();
<a name="l00142"></a>00142         Scalar <a class="code" href="classPOSphere.html#798625bc33390f84032dd30b5abaa112" title="pure virtual detect collision">detectCollision</a>(<a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>* <span class="keywordtype">object</span>);
<a name="l00143"></a>00143         varList <a class="code" href="classPOSphere.html#cab4d5434c63870cd383d38eb985a4fd" title="pure virtual get Statistics for the object">getStats</a>();
<a name="l00144"></a>00144         <span class="keywordtype">void</span> <a class="code" href="classPOSphere.html#39a1a0d77b89ead931e6bef08d41bdd0" title="pure virtual set stats">setStats</a>(varList _stats);
<a name="l00145"></a>00145 <span class="keyword">protected</span>:
<a name="l00146"></a>00146         Vector&lt;Scalar&gt; normal;
<a name="l00147"></a>00147         Scalar length;
<a name="l00148"></a>00148         Scalar width;
<a name="l00149"></a>00149         Scalar d;
<a name="l00150"></a>00150 };
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <span class="keywordtype">void</span> <a class="code" href="classPObject.html#587e0263ce46133bf886729f890f9f2b" title="default base destructer">POPlane::update</a>()
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 Scalar <a class="code" href="classPObject.html#e1828c1830e8e9924ca4c560cbe2f933" title="pure virtual detect collision">POPlane::detectCollision</a>(<a class="code" href="classPObject.html" title="The base class for all Physics Objects.">PObject</a>* <span class="keywordtype">object</span>)
<a name="l00157"></a>00157 {
<a name="l00158"></a>00158         varList temp = <span class="keywordtype">object</span>-&gt;getStats();
<a name="l00159"></a>00159         Vector&lt;Scalar&gt; otherPoM = <span class="keywordtype">object</span>-&gt;getPoM();
<a name="l00160"></a>00160         Scalar dist = 0.0;
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         <span class="keywordflow">if</span> (temp[0] &gt; 0.999&amp;&amp;temp[0]&lt;1.001)<span class="comment">//if a Scalar "equal" to 1.0 it's a sphere</span>
<a name="l00163"></a>00163         {
<a name="l00164"></a>00164                 std::clog&lt;&lt;<span class="stringliteral">"PvS r1:"</span>&lt;&lt;temp[1]&lt;&lt;<span class="stringliteral">" n:"</span>&lt;&lt;normal.x&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.y&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.z&lt;&lt;<span class="stringliteral">"--d:"</span>&lt;&lt;d&lt;&lt;<span class="stringliteral">" dist:"</span>&lt;&lt;dist&lt;&lt;std::endl;
<a name="l00165"></a>00165                 
<a name="l00166"></a>00166                 <span class="keywordflow">return</span> dist;
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (temp[0] &gt; 1.999&amp;&amp;temp[0]&lt;2.001)<span class="comment">//if a Scalar "equal" to 2.0 it's a plane too</span>
<a name="l00169"></a>00169         {
<a name="l00170"></a>00170                 std::clog&lt;&lt;<span class="stringliteral">"PvP n1:"</span>&lt;&lt;normal.x&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.y&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.z&lt;&lt;<span class="stringliteral">" n2:"</span>&lt;&lt;temp[1]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;temp[2]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;temp[3]&lt;&lt;<span class="stringliteral">"--d:"</span>&lt;&lt;d&lt;&lt;<span class="stringliteral">" dist:"</span>&lt;&lt;dist&lt;&lt;std::endl;
<a name="l00171"></a>00171                 
<a name="l00172"></a>00172                 <span class="keywordflow">return</span> dist;
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174         <span class="keywordflow">return</span> dist;
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 varList <a class="code" href="classPObject.html#4def469478987ead107c777d31790092" title="pure virtual get Statistics for the object">POPlane::getStats</a>()
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179         varList temp;
<a name="l00180"></a>00180         
<a name="l00181"></a>00181         temp.push_back(2.0);
<a name="l00182"></a>00182         temp.push_back(normal.x);
<a name="l00183"></a>00183         temp.push_back(normal.y);
<a name="l00184"></a>00184         temp.push_back(normal.z);
<a name="l00185"></a>00185         temp.push_back(length);
<a name="l00186"></a>00186         temp.push_back(width);
<a name="l00187"></a>00187         <span class="keywordflow">return</span> temp;
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="keywordtype">void</span> <a class="code" href="classPObject.html#b838f7867acec8e4199947aaf51f9763" title="pure virtual set stats">POPlane::setStats</a>(varList _stats)
<a name="l00191"></a>00191 {
<a name="l00192"></a>00192         <span class="keywordflow">if</span>(_stats.size()&gt;=6)
<a name="l00193"></a>00193         {
<a name="l00194"></a>00194                 normal.x = _stats[1];
<a name="l00195"></a>00195                 normal.y = _stats[2];
<a name="l00196"></a>00196                 normal.z = _stats[3];
<a name="l00197"></a>00197                 
<a name="l00198"></a>00198                 length = _stats[4];
<a name="l00199"></a>00199                 width  = _stats[5];
<a name="l00200"></a>00200                 
<a name="l00201"></a>00201                 normal.normalize();
<a name="l00202"></a>00202                 
<a name="l00203"></a>00203                 d = (normal.x*<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.x)+(normal.y*<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.y)+(normal.z*<a class="code" href="classPObject.html#c605ad1786c7e60dc03faa7340e6b204" title="set Mass Moment of Inertia">PoM</a>.z);
<a name="l00204"></a>00204                 
<a name="l00205"></a>00205                 std::clog&lt;&lt;<span class="stringliteral">"set Plane Object to n:"</span>&lt;&lt;_stats[1]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;_stats[2]&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;_stats[3]&lt;&lt;<span class="stringliteral">" L:"</span>&lt;&lt;_stats[4]&lt;&lt;<span class="stringliteral">" W:"</span>&lt;&lt;_stats[5]&lt;&lt;std::endl;
<a name="l00206"></a>00206                 std::clog&lt;&lt;<span class="stringliteral">"set Plane Object to n:"</span>&lt;&lt;normal.x&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.y&lt;&lt;<span class="stringliteral">","</span>&lt;&lt;normal.z&lt;&lt;<span class="stringliteral">" L:"</span>&lt;&lt;length&lt;&lt;<span class="stringliteral">" W:"</span>&lt;&lt;width&lt;&lt;std::endl;
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Oct 18 10:41:37 2008 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>
