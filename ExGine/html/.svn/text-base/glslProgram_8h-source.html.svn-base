<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>glslProgram.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>glslProgram.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef __GLSLPROGRAM_H__</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define __GLSLPROGRAM_H__</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include "glslShader.h"</span>
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="keyword">class </span>glslProgram
<a name="l00009"></a>00009 {
<a name="l00010"></a>00010 <span class="keyword">public</span>:
<a name="l00011"></a>00011         glslProgram();
<a name="l00012"></a>00012         glslProgram(<span class="keyword">const</span> std::string &amp;shader, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shaderType);
<a name="l00013"></a>00013         glslProgram(<span class="keyword">const</span> std::string &amp;vertexShader, <span class="keyword">const</span> std::string &amp;fragShader);
<a name="l00014"></a>00014         ~glslProgram(){glDeleteProgram(handle);};
<a name="l00015"></a>00015         
<a name="l00016"></a>00016         <span class="keywordtype">void</span> attach(glslShader &amp;shader);
<a name="l00017"></a>00017         <span class="keywordtype">void</span> attach(glslShader *shader);
<a name="l00018"></a>00018         <span class="keywordtype">void</span> detach(glslShader &amp;shader);
<a name="l00019"></a>00019         <span class="keywordtype">void</span> detach(glslShader *shader);
<a name="l00020"></a>00020         
<a name="l00021"></a>00021         <span class="keywordtype">void</span> link();
<a name="l00022"></a>00022         <span class="keywordtype">void</span> use() <span class="keyword">const</span>;
<a name="l00023"></a>00023         <span class="keywordtype">void</span> disable(GLuint _handle) <span class="keyword">const</span>;
<a name="l00024"></a>00024         
<a name="l00025"></a>00025         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x);
<a name="l00026"></a>00026         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y);
<a name="l00027"></a>00027         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z);
<a name="l00028"></a>00028         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> w);
<a name="l00029"></a>00029         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x);
<a name="l00030"></a>00030         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y);
<a name="l00031"></a>00031         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z);
<a name="l00032"></a>00032         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z, <span class="keywordtype">int</span> w);
<a name="l00033"></a>00033         <span class="keywordtype">void</span> sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> *m, <span class="keywordtype">bool</span> transp, <span class="keywordtype">int</span> size);
<a name="l00034"></a>00034         
<a name="l00035"></a>00035         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">float</span> x);
<a name="l00036"></a>00036         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y);
<a name="l00037"></a>00037         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z);
<a name="l00038"></a>00038         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> w);
<a name="l00039"></a>00039         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">int</span> x);
<a name="l00040"></a>00040         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y);
<a name="l00041"></a>00041         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z);
<a name="l00042"></a>00042         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z, <span class="keywordtype">int</span> w);
<a name="l00043"></a>00043         <span class="keywordtype">void</span> sendUniform(GLuint location, <span class="keywordtype">float</span> *m, <span class="keywordtype">bool</span> transp, <span class="keywordtype">int</span> size);
<a name="l00044"></a>00044         
<a name="l00045"></a>00045         GLuint getUniformLocation(<span class="keyword">const</span> std::string &amp;name) <span class="keyword">const</span>;
<a name="l00046"></a>00046         <span class="keywordtype">void</span> setAttributeLocation(<span class="keyword">const</span> std::string &amp;name, GLuint location);
<a name="l00047"></a>00047         GLuint getAttributeLocation(<span class="keyword">const</span> std::string &amp;name) <span class="keyword">const</span>;
<a name="l00048"></a>00048         
<a name="l00049"></a>00049         <span class="keywordtype">void</span> GetProgramLog(std::string &amp;log) <span class="keyword">const</span>;
<a name="l00050"></a>00050         GLuint getHandle() <span class="keyword">const</span>;
<a name="l00051"></a>00051         <span class="keywordtype">void</span> getParameter(GLuint param, GLint *data) <span class="keyword">const</span>;
<a name="l00052"></a>00052         <span class="keywordtype">void</span> validate() <span class="keyword">const</span>;
<a name="l00053"></a>00053         <span class="keywordtype">bool</span> isValidProgram() <span class="keyword">const</span>;
<a name="l00054"></a>00054         <span class="keywordtype">void</span> getAttributeInfo(GLuint location, std::string &amp;name, GLenum &amp;type, GLint &amp;size) <span class="keyword">const</span>;
<a name="l00055"></a>00055         <span class="keywordtype">void</span> getUniformInfo(GLuint location, std::string &amp;name, GLenum &amp;datatype, GLint &amp;size) <span class="keyword">const</span>;
<a name="l00056"></a>00056         <span class="keywordtype">void</span> getAttachedShaders(std::vector&lt;GLuint&gt; &amp;shaderHandles);
<a name="l00057"></a>00057         <span class="keywordtype">void</span> getAttachedShaders(std::vector&lt;glslShader&gt; &amp;shaders);
<a name="l00058"></a>00058         
<a name="l00059"></a>00059         <span class="keywordtype">string</span> getName(){<span class="keywordflow">return</span> names;};
<a name="l00060"></a>00060         
<a name="l00061"></a>00061 <span class="keyword">protected</span>:
<a name="l00062"></a>00062         <span class="keywordtype">string</span> names;
<a name="l00063"></a>00063         GLuint handle;
<a name="l00064"></a>00064         std::vector&lt;glslShader&gt; shaderVector;
<a name="l00065"></a>00065 };
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 glslProgram::glslProgram()
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069         handle = glCreateProgram();
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 glslProgram::glslProgram(<span class="keyword">const</span> std::string &amp;shader, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shaderType=GL_VERTEX_SHADER)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074         names += ((shaderType==GL_VERTEX_SHADER)?<span class="stringliteral">"vs "</span>:<span class="stringliteral">"fs "</span>) + shader;
<a name="l00075"></a>00075         glslShader temp(shader,shaderType);
<a name="l00076"></a>00076         shaderVector.push_back(temp);
<a name="l00077"></a>00077         
<a name="l00078"></a>00078         handle = glCreateProgram();
<a name="l00079"></a>00079         
<a name="l00080"></a>00080         glAttachShader(handle, temp.getHandle());
<a name="l00081"></a>00081         
<a name="l00082"></a>00082         link();
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 glslProgram::glslProgram(<span class="keyword">const</span> std::string &amp;vertexShader, <span class="keyword">const</span> std::string &amp;fragShader)
<a name="l00086"></a>00086 {
<a name="l00087"></a>00087         names += <span class="stringliteral">"vs "</span>+vertexShader+<span class="stringliteral">" fs "</span>+fragShader;
<a name="l00088"></a>00088         glslShader tempVS(vertexShader);
<a name="l00089"></a>00089         glslShader tempFS(fragShader,GL_FRAGMENT_SHADER);
<a name="l00090"></a>00090         shaderVector.push_back(tempVS);
<a name="l00091"></a>00091         shaderVector.push_back(tempFS);
<a name="l00092"></a>00092         
<a name="l00093"></a>00093         handle = glCreateProgram();
<a name="l00094"></a>00094         
<a name="l00095"></a>00095         glAttachShader(handle, tempVS.getHandle());
<a name="l00096"></a>00096         glAttachShader(handle, tempFS.getHandle());
<a name="l00097"></a>00097         
<a name="l00098"></a>00098         link();
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 <span class="keywordtype">void</span> glslProgram::link()
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103         glGetError();
<a name="l00104"></a>00104         <span class="keywordflow">if</span>(glIsProgram(handle) == GL_FALSE)
<a name="l00105"></a>00105         {
<a name="l00106"></a>00106                 std::clog&lt;&lt;<span class="stringliteral">"not valid handle\n"</span>;
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108         glLinkProgram(handle);
<a name="l00109"></a>00109         <span class="keywordflow">if</span>(glGetError() != GL_NO_ERROR)
<a name="l00110"></a>00110         {
<a name="l00111"></a>00111                 std::clog&lt;&lt;<span class="stringliteral">"Shader fuck up: link error\n"</span>;
<a name="l00112"></a>00112                  <span class="keywordflow">return</span> (<span class="keywordtype">void</span>)-1;
<a name="l00113"></a>00113          }
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="keywordtype">void</span> glslProgram::attach(glslShader &amp;shader)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118         shaderVector.push_back(shader);
<a name="l00119"></a>00119         glAttachShader(handle, shader.getHandle());
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="keywordtype">void</span> glslProgram::attach(glslShader *shader)
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124         shaderVector.push_back(*shader);
<a name="l00125"></a>00125         glAttachShader(handle, shader-&gt;getHandle());
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keywordtype">void</span> glslProgram::detach(glslShader &amp;shader)
<a name="l00129"></a>00129 {
<a name="l00130"></a>00130         std::vector&lt;glslShader&gt;::iterator temp;
<a name="l00131"></a>00131         <span class="keywordflow">for</span>( temp = shaderVector.begin(); temp != shaderVector.end()&amp;&amp;shader.getHandle() != temp-&gt;getHandle(); temp++ ) 
<a name="l00132"></a>00132                 <span class="keywordflow">if</span>(shader.getHandle() == temp-&gt;getHandle())<span class="keywordflow">break</span>;
<a name="l00133"></a>00133         
<a name="l00134"></a>00134         shaderVector.erase(temp);
<a name="l00135"></a>00135         
<a name="l00136"></a>00136         glDetachShader(handle, shader.getHandle());
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 <span class="keywordtype">void</span> glslProgram::detach(glslShader *shader)
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141         std::vector&lt;glslShader&gt;::iterator temp;
<a name="l00142"></a>00142         <span class="keywordflow">for</span>( temp = shaderVector.begin(); temp != shaderVector.end()&amp;&amp;shader-&gt;getHandle() != temp-&gt;getHandle(); temp++ ) 
<a name="l00143"></a>00143                 <span class="keywordflow">if</span>(shader-&gt;getHandle() == temp-&gt;getHandle())<span class="keywordflow">break</span>;
<a name="l00144"></a>00144         
<a name="l00145"></a>00145         shaderVector.erase(temp);
<a name="l00146"></a>00146         
<a name="l00147"></a>00147         glDetachShader(handle, shader-&gt;getHandle());
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="keywordtype">void</span> glslProgram::use()<span class="keyword"> const</span>
<a name="l00151"></a>00151 <span class="keyword"></span>{
<a name="l00152"></a>00152         glGetError();
<a name="l00153"></a>00153         <span class="keywordflow">if</span>(glIsProgram(handle) == GL_FALSE)
<a name="l00154"></a>00154         {
<a name="l00155"></a>00155                 std::clog&lt;&lt;<span class="stringliteral">"not valid handle\n"</span>;
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157         GLint test;
<a name="l00158"></a>00158         getParameter(GL_LINK_STATUS, &amp;test);
<a name="l00159"></a>00159         <span class="keywordflow">if</span>(test == GL_FALSE)
<a name="l00160"></a>00160         {
<a name="l00161"></a>00161                 <span class="comment">//std::clog&lt;&lt;"not linked\n";</span>
<a name="l00162"></a>00162         }
<a name="l00163"></a>00163         glUseProgram(handle);
<a name="l00164"></a>00164         GLuint error = glGetError();
<a name="l00165"></a>00165         <span class="keywordflow">if</span>(error != GL_NO_ERROR)
<a name="l00166"></a>00166         {
<a name="l00167"></a>00167                 <span class="comment">//std::clog&lt;&lt;"Shader fuck up: USE error:"&lt;&lt;error&lt;&lt;"\n";</span>
<a name="l00168"></a>00168                  <span class="keywordflow">return</span> (<span class="keywordtype">void</span>)-1;
<a name="l00169"></a>00169          }
<a name="l00170"></a>00170 }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="keywordtype">void</span> glslProgram::disable(GLuint _handle=0)<span class="keyword"> const</span>
<a name="l00173"></a>00173 <span class="keyword"></span>{
<a name="l00174"></a>00174         glUseProgram(_handle);
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x)
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179         glUniform1f(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x);
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x)
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184         glUniform1i(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x);
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y)
<a name="l00188"></a>00188 {
<a name="l00189"></a>00189         glUniform2f(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y);
<a name="l00190"></a>00190 }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)
<a name="l00193"></a>00193 {
<a name="l00194"></a>00194         glUniform2i(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y);
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199         glUniform3f(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y, z);
<a name="l00200"></a>00200 }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z)
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204         glUniform3i(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y, z);
<a name="l00205"></a>00205 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> w)
<a name="l00208"></a>00208 {
<a name="l00209"></a>00209         glUniform4f(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y, z, w);
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z, <span class="keywordtype">int</span> w)
<a name="l00213"></a>00213 {
<a name="l00214"></a>00214         glUniform4i(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), x, y, z, w);
<a name="l00215"></a>00215 }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="keywordtype">void</span> glslProgram::sendUniform(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">float</span> *m, <span class="keywordtype">bool</span> transp=<span class="keyword">false</span>, <span class="keywordtype">int</span> size=4)
<a name="l00218"></a>00218 {
<a name="l00219"></a>00219         <span class="keywordflow">switch</span>(size)
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221                 <span class="keywordflow">case</span> 2:
<a name="l00222"></a>00222                         glUniformMatrix2fv(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), 1, transp, m);
<a name="l00223"></a>00223                         <span class="keywordflow">break</span>;
<a name="l00224"></a>00224                 <span class="keywordflow">case</span> 3:
<a name="l00225"></a>00225                         glUniformMatrix3fv(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), 1, transp, m);
<a name="l00226"></a>00226                         <span class="keywordflow">break</span>;
<a name="l00227"></a>00227                 <span class="keywordflow">case</span> 4:
<a name="l00228"></a>00228                         glUniformMatrix4fv(glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str()), 1, transp, m);
<a name="l00229"></a>00229                         <span class="keywordflow">break</span>;
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">float</span> x)
<a name="l00234"></a>00234 {
<a name="l00235"></a>00235         glUniform1f(location, x);
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">int</span> x)
<a name="l00239"></a>00239 {
<a name="l00240"></a>00240         glUniform1i(location, x);
<a name="l00241"></a>00241 }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y)
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245         glUniform2f(location, x, y);
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)
<a name="l00249"></a>00249 {
<a name="l00250"></a>00250         glUniform2i(location, x, y);
<a name="l00251"></a>00251 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z)
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255         glUniform3f(location, x, y, z);
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z)
<a name="l00259"></a>00259 {
<a name="l00260"></a>00260         glUniform3i(location, x, y, z);
<a name="l00261"></a>00261 }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> w)
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265         glUniform4f(location, x, y, z, w);
<a name="l00266"></a>00266 }
<a name="l00267"></a>00267 
<a name="l00268"></a>00268 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> z, <span class="keywordtype">int</span> w)
<a name="l00269"></a>00269 {
<a name="l00270"></a>00270         glUniform4i(location, x, y, z, w);
<a name="l00271"></a>00271 }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 <span class="keywordtype">void</span> glslProgram::sendUniform(GLuint location, <span class="keywordtype">float</span> *m, <span class="keywordtype">bool</span> transp=<span class="keyword">false</span>, <span class="keywordtype">int</span> size=4)
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275         <span class="keywordflow">switch</span>(size)
<a name="l00276"></a>00276         {
<a name="l00277"></a>00277                 <span class="keywordflow">case</span> 2:
<a name="l00278"></a>00278                         glUniformMatrix2fv(location, 1, transp, m);
<a name="l00279"></a>00279                         <span class="keywordflow">break</span>;
<a name="l00280"></a>00280                 <span class="keywordflow">case</span> 3:
<a name="l00281"></a>00281                         glUniformMatrix3fv(location, 1, transp, m);
<a name="l00282"></a>00282                         <span class="keywordflow">break</span>;
<a name="l00283"></a>00283                 <span class="keywordflow">case</span> 4:
<a name="l00284"></a>00284                         glUniformMatrix4fv(location, 1, transp, m);
<a name="l00285"></a>00285                         <span class="keywordflow">break</span>;
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 GLuint glslProgram::getUniformLocation(<span class="keyword">const</span> std::string &amp;name)<span class="keyword"> const</span>
<a name="l00290"></a>00290 <span class="keyword"></span>{
<a name="l00291"></a>00291         <span class="keywordflow">return</span> glGetUniformLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str());
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 <span class="keywordtype">void</span> glslProgram::setAttributeLocation(<span class="keyword">const</span> std::string &amp;name, GLuint location)
<a name="l00295"></a>00295 {
<a name="l00296"></a>00296         glBindAttribLocation(handle,location, (<span class="keyword">const</span> GLchar*)name.c_str());
<a name="l00297"></a>00297 }
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 GLuint glslProgram::getAttributeLocation(<span class="keyword">const</span> std::string &amp;name)<span class="keyword"> const</span>
<a name="l00300"></a>00300 <span class="keyword"></span>{
<a name="l00301"></a>00301         <span class="keywordflow">return</span> glGetAttribLocation(handle,(<span class="keyword">const</span> GLchar*)name.c_str());
<a name="l00302"></a>00302 }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 <span class="keywordtype">void</span> glslProgram::GetProgramLog(std::string &amp;log)<span class="keyword"> const</span>
<a name="l00305"></a>00305 <span class="keyword"></span>{
<a name="l00306"></a>00306         GLint length;
<a name="l00307"></a>00307         glGetProgramiv(handle, GL_INFO_LOG_LENGTH, &amp;length);
<a name="l00308"></a>00308         glGetProgramInfoLog(handle, length+1, NULL, (GLchar*)log.c_str());
<a name="l00309"></a>00309 }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 GLuint glslProgram::getHandle()<span class="keyword"> const</span>
<a name="l00312"></a>00312 <span class="keyword"></span>{
<a name="l00313"></a>00313         <span class="keywordflow">return</span> handle;
<a name="l00314"></a>00314 }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 <span class="keywordtype">void</span> glslProgram::getParameter(GLuint param, GLint *data)<span class="keyword"> const</span>
<a name="l00317"></a>00317 <span class="keyword"></span>{
<a name="l00318"></a>00318         <span class="comment">//GL_DELETE_STATUS                                      GLboolean</span>
<a name="l00319"></a>00319         <span class="comment">//GL_LINK_STATUS                                        GLboolean</span>
<a name="l00320"></a>00320         <span class="comment">//GL_VALIDATE_STATUS                            GLboolean</span>
<a name="l00321"></a>00321         <span class="comment">//GL_INFO_LOG_LENGTH                            GLuint</span>
<a name="l00322"></a>00322         <span class="comment">//GL_ATTACHED_SHADERS                           </span>
<a name="l00323"></a>00323         <span class="comment">//GL_ACTIVE_ATTRIBUTES                          </span>
<a name="l00324"></a>00324         <span class="comment">//GL_ACTIVE_ATTRIBUTE_MAX_LENGTH        </span>
<a name="l00325"></a>00325         <span class="comment">//GL_ACTIVE_UNIFORMS                            </span>
<a name="l00326"></a>00326         <span class="comment">//GL_ACTIVE_UNIFORM_MAX_LENGTH          </span>
<a name="l00327"></a>00327         glGetProgramiv(handle, param, data);
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 <span class="keywordtype">void</span> glslProgram::validate()<span class="keyword"> const</span>
<a name="l00331"></a>00331 <span class="keyword"></span>{
<a name="l00332"></a>00332         glValidateProgram(handle);
<a name="l00333"></a>00333 }
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 <span class="keywordtype">bool</span> glslProgram::isValidProgram()<span class="keyword"> const</span>
<a name="l00336"></a>00336 <span class="keyword"></span>{
<a name="l00337"></a>00337         GLint valid;
<a name="l00338"></a>00338         glGetProgramiv(handle, GL_VALIDATE_STATUS, &amp;valid);
<a name="l00339"></a>00339         <span class="keywordflow">if</span>(valid == GL_TRUE)
<a name="l00340"></a>00340         {
<a name="l00341"></a>00341                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343         <span class="keywordflow">else</span>
<a name="l00344"></a>00344         {
<a name="l00345"></a>00345                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00346"></a>00346         }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="keywordtype">void</span> glslProgram::getAttributeInfo(GLuint location, std::string &amp;name, GLenum &amp;type, GLint &amp;size)<span class="keyword"> const</span>
<a name="l00351"></a>00351 <span class="keyword"></span>{
<a name="l00352"></a>00352         
<a name="l00353"></a>00353 }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="keywordtype">void</span> glslProgram::getUniformInfo(GLuint location, std::string &amp;name, GLenum &amp;datatype, GLint &amp;size)<span class="keyword"> const</span>
<a name="l00356"></a>00356 <span class="keyword"></span>{
<a name="l00357"></a>00357         
<a name="l00358"></a>00358 }
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 <span class="keywordtype">void</span> glslProgram::getAttachedShaders(std::vector&lt;GLuint&gt; &amp;shaderHandles)
<a name="l00361"></a>00361 {
<a name="l00362"></a>00362         
<a name="l00363"></a>00363 }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="keywordtype">void</span> glslProgram::getAttachedShaders(std::vector&lt;glslShader&gt; &amp;shaders)
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367         shaders = shaderVector;
<a name="l00368"></a>00368 }
<a name="l00369"></a>00369 
<a name="l00370"></a>00370 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Oct 18 10:41:37 2008 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>
