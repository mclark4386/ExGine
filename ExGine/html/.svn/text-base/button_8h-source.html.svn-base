<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>button.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>button.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef __BUTTON_H__</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define __BUTTON_H__</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include "widgets.h"</span>
<a name="l00005"></a>00005 
<a name="l00006"></a>00006 <span class="keyword">class </span>Button:<span class="keyword">public</span> Widget
<a name="l00007"></a>00007 {
<a name="l00008"></a>00008 <span class="keyword">public</span>:
<a name="l00009"></a>00009         Button();
<a name="l00010"></a>00010         Button(<span class="keywordtype">int</span> _x, <span class="keywordtype">int</span> _y, <span class="keywordtype">int</span> _w, <span class="keywordtype">int</span> _h);
<a name="l00011"></a>00011         ~Button(){<span class="keyword">delete</span> [] plane; <span class="keyword">delete</span> [] planeUV; <span class="keyword">delete</span> [] color;};
<a name="l00012"></a>00012         <span class="keywordtype">int</span> reposition(<span class="keywordtype">int</span> _x, <span class="keywordtype">int</span> _y);
<a name="l00013"></a>00013         <span class="keywordtype">int</span> reshape(<span class="keywordtype">int</span> _w, <span class="keywordtype">int</span> _h);
<a name="l00014"></a>00014         <span class="keywordtype">void</span> draw(GLuint textureUnit = 0);
<a name="l00015"></a>00015 <span class="keyword">protected</span>:
<a name="l00016"></a>00016         <span class="keywordtype">int</span> w;
<a name="l00017"></a>00017         <span class="keywordtype">int</span> h;
<a name="l00018"></a>00018         <span class="keywordtype">int</span> x;
<a name="l00019"></a>00019         <span class="keywordtype">int</span> y;  
<a name="l00020"></a>00020         
<a name="l00021"></a>00021         GLuint* BufferName;
<a name="l00022"></a>00022 
<a name="l00023"></a>00023         GLfloat* plane;
<a name="l00024"></a>00024         GLfloat* planeUV;
<a name="l00025"></a>00025         GLubyte* color;
<a name="l00026"></a>00026         GLfloat* norm;
<a name="l00027"></a>00027         
<a name="l00028"></a>00028         Texture* textures[2];
<a name="l00029"></a>00029         
<a name="l00030"></a>00030         <span class="keywordtype">string</span> hitFilename;
<a name="l00031"></a>00031         
<a name="l00032"></a>00032         <span class="keyword">enum</span>
<a name="l00033"></a>00033         {
<a name="l00034"></a>00034                 POSITION_OBJECT=0, <span class="comment">//marker for the position VBO</span>
<a name="l00035"></a>00035                 UV_OBJECT=1,<span class="comment">//marker for the UV VBO</span>
<a name="l00036"></a>00036                 NORMAL_OBJECT=2,<span class="comment">//marker for the normal VBO</span>
<a name="l00037"></a>00037                 COLOR_OBJECT=3<span class="comment">//marker for the color VBO</span>
<a name="l00038"></a>00038         }markers;
<a name="l00039"></a>00039 };
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 Button::Button()
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043         x=0;y=0;w=50;h=50; filename = <span class="stringliteral">"testbutton.tga"</span>; hitFilename = <span class="stringliteral">"testbutton_hit.tga"</span>;
<a name="l00044"></a>00044         BufferName = <span class="keyword">new</span> GLuint[4];
<a name="l00045"></a>00045         plane = <span class="keyword">new</span> GLfloat[8];
<a name="l00046"></a>00046         
<a name="l00047"></a>00047         plane[0] = (GLfloat)x; plane[1] = (GLfloat)y;
<a name="l00048"></a>00048         plane[2] = (GLfloat)x; plane[3] = (GLfloat)y+h;
<a name="l00049"></a>00049         plane[4] = (GLfloat)x+w; plane[5] = (GLfloat)y+h;
<a name="l00050"></a>00050         plane[6] = (GLfloat)x+w; plane[7] = (GLfloat)y;
<a name="l00051"></a>00051         
<a name="l00052"></a>00052         planeUV = <span class="keyword">new</span> GLfloat[8];
<a name="l00053"></a>00053         
<a name="l00054"></a>00054         planeUV[0] = 0.0; planeUV[1] = 0.0;
<a name="l00055"></a>00055         planeUV[2] = 0.0; planeUV[3] = 1.0;
<a name="l00056"></a>00056         planeUV[4] = 1.0; planeUV[5] = 1.0;
<a name="l00057"></a>00057         planeUV[6] = 1.0; planeUV[7] = 0.0;
<a name="l00058"></a>00058         
<a name="l00059"></a>00059         color = <span class="keyword">new</span> GLubyte[12];
<a name="l00060"></a>00060         
<a name="l00061"></a>00061         color[0]=1.0, color[1]=0.0,color[2]=1.0;
<a name="l00062"></a>00062         color[3]=1.0, color[4]=0.0,color[5]=1.0;
<a name="l00063"></a>00063         color[6]=1.0, color[7]=0.0,color[8]=1.0;
<a name="l00064"></a>00064         color[9]=1.0, color[10]=0.0,color[11]=1.0;
<a name="l00065"></a>00065         
<a name="l00066"></a>00066         norm = <span class="keyword">new</span> GLfloat[3];
<a name="l00067"></a>00067         
<a name="l00068"></a>00068         norm[0]=0.0; norm[1]=0.0; norm[2]=1.0;
<a name="l00069"></a>00069         
<a name="l00070"></a>00070         glGenBuffers(4,BufferName);<span class="comment">//generate "3" buffers using the buffername/handle array "BufferName"</span>
<a name="l00071"></a>00071         
<a name="l00072"></a>00072         glBindBuffer(GL_ARRAY_BUFFER, BufferName[UV_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00073"></a>00073         glBufferData(GL_ARRAY_BUFFER, 8*<span class="keyword">sizeof</span>(GLfloat), planeUV, GL_STATIC_DRAW);<span class="comment">//load the color data to the buffer//for static models</span>
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         glBindBuffer(GL_ARRAY_BUFFER, BufferName[NORMAL_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00076"></a>00076         glBufferData(GL_ARRAY_BUFFER, 3*<span class="keyword">sizeof</span>(GLfloat), norm, GL_STATIC_DRAW);
<a name="l00077"></a>00077         
<a name="l00078"></a>00078         glBindBuffer(GL_ARRAY_BUFFER, BufferName[COLOR_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00079"></a>00079         glBufferData(GL_ARRAY_BUFFER, 12*<span class="keyword">sizeof</span>(GLubyte), color, GL_STATIC_DRAW);<span class="comment">//load the color data to the buffer//for static models</span>
<a name="l00080"></a>00080         
<a name="l00081"></a>00081         glBindBuffer(GL_ARRAY_BUFFER, BufferName[POSITION_OBJECT]);
<a name="l00082"></a>00082         glBufferData(GL_ARRAY_BUFFER, 8*<span class="keyword">sizeof</span>(GLfloat), plane, GL_STATIC_DRAW);
<a name="l00083"></a>00083         
<a name="l00084"></a>00084         Texture* temp;
<a name="l00085"></a>00085         
<a name="l00086"></a>00086         textures[0] = <span class="keyword">new</span> Texture();
<a name="l00087"></a>00087         
<a name="l00088"></a>00088         <span class="keywordtype">int</span> tempText = textures[0]-&gt;load(filename.c_str());
<a name="l00089"></a>00089         
<a name="l00090"></a>00090         <span class="keywordflow">if</span>(tempText != TFILE_OPEN)
<a name="l00091"></a>00091         {
<a name="l00092"></a>00092                 <span class="keywordflow">switch</span>(tempText)
<a name="l00093"></a>00093                 {
<a name="l00094"></a>00094                         <span class="keywordflow">case</span> TFILE_BAD_FORMAT:
<a name="l00095"></a>00095                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse is the wrong format"</span>&lt;&lt;std::endl;
<a name="l00096"></a>00096                                 <span class="keywordflow">break</span>;
<a name="l00097"></a>00097                         <span class="keywordflow">case</span> TFILE_NOFILE:
<a name="l00098"></a>00098                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse not found"</span>&lt;&lt;std::endl;
<a name="l00099"></a>00099                                 <span class="keywordflow">break</span>;
<a name="l00100"></a>00100                         <span class="keywordflow">case</span> TFILE_NOREAD:
<a name="l00101"></a>00101                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse not readable"</span>&lt;&lt;std::endl;
<a name="l00102"></a>00102                                 <span class="keywordflow">break</span>;
<a name="l00103"></a>00103                         <span class="keywordflow">case</span> TFILE_OOM:
<a name="l00104"></a>00104                                 std::cout&lt;&lt;<span class="stringliteral">"don't have the memory to load the diffuse"</span>&lt;&lt;std::endl;
<a name="l00105"></a>00105                                 <span class="keywordflow">break</span>;
<a name="l00106"></a>00106                         <span class="keywordflow">default</span>:
<a name="l00107"></a>00107                                 std::cout&lt;&lt;<span class="stringliteral">"unknown error loading diffuse"</span>&lt;&lt;std::endl;
<a name="l00108"></a>00108                                 <span class="keywordflow">break</span>;
<a name="l00109"></a>00109                 }
<a name="l00110"></a>00110                 temp = textures[0];
<a name="l00111"></a>00111                 textures[0] = 0;
<a name="l00112"></a>00112                 <span class="keyword">delete</span> temp;
<a name="l00113"></a>00113         }
<a name="l00114"></a>00114         
<a name="l00115"></a>00115         textures[1] = <span class="keyword">new</span> Texture();
<a name="l00116"></a>00116         
<a name="l00117"></a>00117         tempText = textures[1]-&gt;load(hitFilename.c_str());
<a name="l00118"></a>00118         
<a name="l00119"></a>00119         
<a name="l00120"></a>00120         <span class="keywordflow">if</span>(tempText != TFILE_OPEN)
<a name="l00121"></a>00121         {
<a name="l00122"></a>00122                 <span class="keywordflow">switch</span>(tempText)
<a name="l00123"></a>00123                 {
<a name="l00124"></a>00124                         <span class="keywordflow">case</span> TFILE_BAD_FORMAT:
<a name="l00125"></a>00125                                 std::cout&lt;&lt;<span class="stringliteral">"normal map is the wrong format"</span>&lt;&lt;std::endl;
<a name="l00126"></a>00126                                 <span class="keywordflow">break</span>;
<a name="l00127"></a>00127                         <span class="keywordflow">case</span> TFILE_NOFILE:
<a name="l00128"></a>00128                                 std::cout&lt;&lt;<span class="stringliteral">"normal map not found"</span>&lt;&lt;std::endl;
<a name="l00129"></a>00129                                 <span class="keywordflow">break</span>;
<a name="l00130"></a>00130                         <span class="keywordflow">case</span> TFILE_NOREAD:
<a name="l00131"></a>00131                                 std::cout&lt;&lt;<span class="stringliteral">"normal map not readable"</span>&lt;&lt;std::endl;
<a name="l00132"></a>00132                                 <span class="keywordflow">break</span>;
<a name="l00133"></a>00133                         <span class="keywordflow">case</span> TFILE_OOM:
<a name="l00134"></a>00134                                 std::cout&lt;&lt;<span class="stringliteral">"don't have the memory to load the normal map"</span>&lt;&lt;std::endl;
<a name="l00135"></a>00135                                 <span class="keywordflow">break</span>;
<a name="l00136"></a>00136                         <span class="keywordflow">default</span>:
<a name="l00137"></a>00137                                 std::cout&lt;&lt;<span class="stringliteral">"unknown error loading normal map"</span>&lt;&lt;std::endl;
<a name="l00138"></a>00138                                 <span class="keywordflow">break</span>;
<a name="l00139"></a>00139                 }
<a name="l00140"></a>00140                 temp = textures[1];
<a name="l00141"></a>00141                 textures[1] = 0;
<a name="l00142"></a>00142                 <span class="keyword">delete</span> temp;
<a name="l00143"></a>00143         }<span class="comment">//*/</span>
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 Button::Button(<span class="keywordtype">int</span> _x, <span class="keywordtype">int</span> _y, <span class="keywordtype">int</span> _w, <span class="keywordtype">int</span> _h, <span class="keywordtype">string</span> _filename, <span class="keywordtype">string</span> _hitFilename)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148         x=_x;y=_y;w=_w;h=_h;
<a name="l00149"></a>00149         filename = _filename;
<a name="l00150"></a>00150         hitFilename = _hitFilename;
<a name="l00151"></a>00151         BufferName = <span class="keyword">new</span> GLuint[4];
<a name="l00152"></a>00152         plane = <span class="keyword">new</span> GLfloat[8];
<a name="l00153"></a>00153         
<a name="l00154"></a>00154         plane[0] = (GLfloat)x; plane[1] = (GLfloat)y;
<a name="l00155"></a>00155         plane[2] = (GLfloat)x; plane[3] = (GLfloat)y+h;
<a name="l00156"></a>00156         plane[4] = (GLfloat)x+w; plane[5] = (GLfloat)y+h;
<a name="l00157"></a>00157         plane[6] = (GLfloat)x+w; plane[7] = (GLfloat)y;
<a name="l00158"></a>00158         
<a name="l00159"></a>00159         planeUV = <span class="keyword">new</span> GLfloat[8];
<a name="l00160"></a>00160         
<a name="l00161"></a>00161         planeUV[0] = 0.0; planeUV[1] = 0.0;
<a name="l00162"></a>00162         planeUV[2] = 0.0; planeUV[3] = 1.0;
<a name="l00163"></a>00163         planeUV[4] = 1.0; planeUV[5] = 1.0;
<a name="l00164"></a>00164         planeUV[6] = 1.0; planeUV[7] = 0.0;
<a name="l00165"></a>00165         
<a name="l00166"></a>00166         color = <span class="keyword">new</span> GLubyte[12];
<a name="l00167"></a>00167         
<a name="l00168"></a>00168         color[0]=1.0, color[1]=0.0,color[2]=1.0;
<a name="l00169"></a>00169         color[3]=1.0, color[4]=0.0,color[5]=1.0;
<a name="l00170"></a>00170         color[6]=1.0, color[7]=0.0,color[8]=1.0;
<a name="l00171"></a>00171         color[9]=1.0, color[10]=0.0,color[11]=1.0;
<a name="l00172"></a>00172         
<a name="l00173"></a>00173         norm = <span class="keyword">new</span> GLfloat[3];
<a name="l00174"></a>00174         
<a name="l00175"></a>00175         norm[0]=0.0; norm[1]=0.0; norm[2]=1.0;
<a name="l00176"></a>00176         
<a name="l00177"></a>00177         glGenBuffers(4,BufferName);<span class="comment">//generate "3" buffers using the buffername/handle array "BufferName"</span>
<a name="l00178"></a>00178         
<a name="l00179"></a>00179         glBindBuffer(GL_ARRAY_BUFFER, BufferName[UV_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00180"></a>00180         glBufferData(GL_ARRAY_BUFFER, 8*<span class="keyword">sizeof</span>(GLfloat), planeUV, GL_STATIC_DRAW);<span class="comment">//load the color data to the buffer//for static models</span>
<a name="l00181"></a>00181         
<a name="l00182"></a>00182         glBindBuffer(GL_ARRAY_BUFFER, BufferName[NORMAL_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00183"></a>00183         glBufferData(GL_ARRAY_BUFFER, 3*<span class="keyword">sizeof</span>(GLfloat), norm, GL_STATIC_DRAW);
<a name="l00184"></a>00184         
<a name="l00185"></a>00185         glBindBuffer(GL_ARRAY_BUFFER, BufferName[COLOR_OBJECT]);<span class="comment">//bind this buffer to the color buffername or handle</span>
<a name="l00186"></a>00186         glBufferData(GL_ARRAY_BUFFER, 12*<span class="keyword">sizeof</span>(GLubyte), color, GL_STATIC_DRAW);<span class="comment">//load the color data to the buffer//for static models</span>
<a name="l00187"></a>00187         
<a name="l00188"></a>00188         glBindBuffer(GL_ARRAY_BUFFER, BufferName[POSITION_OBJECT]);
<a name="l00189"></a>00189         glBufferData(GL_ARRAY_BUFFER, 8*<span class="keyword">sizeof</span>(GLfloat), plane, GL_STATIC_DRAW);
<a name="l00190"></a>00190         
<a name="l00191"></a>00191         Texture* temp;
<a name="l00192"></a>00192         
<a name="l00193"></a>00193         textures[0] = <span class="keyword">new</span> Texture();
<a name="l00194"></a>00194         
<a name="l00195"></a>00195         <span class="keywordtype">int</span> tempText = textures[0]-&gt;load(filename.c_str());
<a name="l00196"></a>00196         
<a name="l00197"></a>00197         <span class="keywordflow">if</span>(tempText != TFILE_OPEN)
<a name="l00198"></a>00198         {
<a name="l00199"></a>00199                 <span class="keywordflow">switch</span>(tempText)
<a name="l00200"></a>00200                 {
<a name="l00201"></a>00201                         <span class="keywordflow">case</span> TFILE_BAD_FORMAT:
<a name="l00202"></a>00202                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse is the wrong format"</span>&lt;&lt;std::endl;
<a name="l00203"></a>00203                                 <span class="keywordflow">break</span>;
<a name="l00204"></a>00204                         <span class="keywordflow">case</span> TFILE_NOFILE:
<a name="l00205"></a>00205                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse not found"</span>&lt;&lt;std::endl;
<a name="l00206"></a>00206                                 <span class="keywordflow">break</span>;
<a name="l00207"></a>00207                         <span class="keywordflow">case</span> TFILE_NOREAD:
<a name="l00208"></a>00208                                 std::cout&lt;&lt;<span class="stringliteral">"diffuse not readable"</span>&lt;&lt;std::endl;
<a name="l00209"></a>00209                                 <span class="keywordflow">break</span>;
<a name="l00210"></a>00210                         <span class="keywordflow">case</span> TFILE_OOM:
<a name="l00211"></a>00211                                 std::cout&lt;&lt;<span class="stringliteral">"don't have the memory to load the diffuse"</span>&lt;&lt;std::endl;
<a name="l00212"></a>00212                                 <span class="keywordflow">break</span>;
<a name="l00213"></a>00213                         <span class="keywordflow">default</span>:
<a name="l00214"></a>00214                                 std::cout&lt;&lt;<span class="stringliteral">"unknown error loading diffuse"</span>&lt;&lt;std::endl;
<a name="l00215"></a>00215                                 <span class="keywordflow">break</span>;
<a name="l00216"></a>00216                 }
<a name="l00217"></a>00217                 temp = textures[0];
<a name="l00218"></a>00218                 textures[0] = 0;
<a name="l00219"></a>00219                 <span class="keyword">delete</span> temp;
<a name="l00220"></a>00220         }
<a name="l00221"></a>00221         
<a name="l00222"></a>00222         textures[1] = <span class="keyword">new</span> Texture();
<a name="l00223"></a>00223         
<a name="l00224"></a>00224         tempText = textures[1]-&gt;load(hitFilename.c_str());
<a name="l00225"></a>00225         
<a name="l00226"></a>00226         <span class="keywordflow">if</span>(tempText != TFILE_OPEN)
<a name="l00227"></a>00227         {
<a name="l00228"></a>00228                 <span class="keywordflow">switch</span>(tempText)
<a name="l00229"></a>00229                 {
<a name="l00230"></a>00230                         <span class="keywordflow">case</span> TFILE_BAD_FORMAT:
<a name="l00231"></a>00231                                 std::cout&lt;&lt;<span class="stringliteral">"normal map is the wrong format"</span>&lt;&lt;std::endl;
<a name="l00232"></a>00232                                 <span class="keywordflow">break</span>;
<a name="l00233"></a>00233                         <span class="keywordflow">case</span> TFILE_NOFILE:
<a name="l00234"></a>00234                                 std::cout&lt;&lt;<span class="stringliteral">"normal map not found"</span>&lt;&lt;std::endl;
<a name="l00235"></a>00235                                 <span class="keywordflow">break</span>;
<a name="l00236"></a>00236                         <span class="keywordflow">case</span> TFILE_NOREAD:
<a name="l00237"></a>00237                                 std::cout&lt;&lt;<span class="stringliteral">"normal map not readable"</span>&lt;&lt;std::endl;
<a name="l00238"></a>00238                                 <span class="keywordflow">break</span>;
<a name="l00239"></a>00239                         <span class="keywordflow">case</span> TFILE_OOM:
<a name="l00240"></a>00240                                 std::cout&lt;&lt;<span class="stringliteral">"don't have the memory to load the normal map"</span>&lt;&lt;std::endl;
<a name="l00241"></a>00241                                 <span class="keywordflow">break</span>;
<a name="l00242"></a>00242                         <span class="keywordflow">default</span>:
<a name="l00243"></a>00243                                 std::cout&lt;&lt;<span class="stringliteral">"unknown error loading normal map"</span>&lt;&lt;std::endl;
<a name="l00244"></a>00244                                 <span class="keywordflow">break</span>;
<a name="l00245"></a>00245                 }
<a name="l00246"></a>00246                 temp = textures[1];
<a name="l00247"></a>00247                 textures[1] = 0;
<a name="l00248"></a>00248                 <span class="keyword">delete</span> temp;
<a name="l00249"></a>00249         }<span class="comment">//*/</span>
<a name="l00250"></a>00250 }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 <span class="keywordtype">int</span> Button::reshape(<span class="keywordtype">int</span> _w, <span class="keywordtype">int</span> _h)
<a name="l00253"></a>00253 {
<a name="l00254"></a>00254         w=_w;
<a name="l00255"></a>00255         h=_h;
<a name="l00256"></a>00256         <span class="keywordflow">return</span> 0;
<a name="l00257"></a>00257 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="keywordtype">int</span> Button::reposition(<span class="keywordtype">int</span> _x, <span class="keywordtype">int</span> _y)
<a name="l00260"></a>00260 {
<a name="l00261"></a>00261         x=_x;
<a name="l00262"></a>00262         y=_y;
<a name="l00263"></a>00263         <span class="keywordflow">return</span> 0;
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 <span class="keywordtype">void</span> Button::draw(GLuint textureUnit)
<a name="l00267"></a>00267 {
<a name="l00268"></a>00268         <span class="keywordflow">try</span>
<a name="l00269"></a>00269         {
<a name="l00270"></a>00270         glBindBuffer(GL_ARRAY_BUFFER, BufferName[UV_OBJECT]);<span class="comment">//bind to the UV buffer...</span>
<a name="l00271"></a>00271         glTexCoordPointer(2, GL_FLOAT, 0, 0);<span class="comment">//and read it </span>
<a name="l00272"></a>00272         
<a name="l00273"></a>00273         glBindBuffer(GL_ARRAY_BUFFER, BufferName[NORMAL_OBJECT]);<span class="comment">//bind to the Normal buffer...</span>
<a name="l00274"></a>00274         glNormalPointer(GL_FLOAT, 0, 0);<span class="comment">//and read it</span>
<a name="l00275"></a>00275         
<a name="l00276"></a>00276         glBindBuffer(GL_ARRAY_BUFFER, BufferName[POSITION_OBJECT]);<span class="comment">//bind to the pos. buffer...</span>
<a name="l00277"></a>00277         glVertexPointer(2,GL_FLOAT, 0,0);<span class="comment">//and read it</span>
<a name="l00278"></a>00278         
<a name="l00279"></a>00279         glBindBuffer(GL_ARRAY_BUFFER, BufferName[COLOR_OBJECT]);<span class="comment">//bind to the color buffer...</span>
<a name="l00280"></a>00280         glColorPointer(3, GL_UNSIGNED_BYTE, 0, 0);
<a name="l00281"></a>00281         
<a name="l00282"></a>00282         glEnableClientState(GL_VERTEX_ARRAY);
<a name="l00283"></a>00283         glEnableClientState(GL_TEXTURE_COORD_ARRAY);
<a name="l00284"></a>00284         glEnableClientState(GL_NORMAL_ARRAY);
<a name="l00285"></a>00285         glEnableClientState(GL_COLOR_ARRAY);
<a name="l00286"></a>00286         
<a name="l00287"></a>00287         <span class="keywordflow">if</span>(textures[0])
<a name="l00288"></a>00288                 textures[0]-&gt;applyToModel();
<a name="l00289"></a>00289         
<a name="l00290"></a>00290         glDrawArrays(GL_QUADS, 0, 4);
<a name="l00291"></a>00291         
<a name="l00292"></a>00292         glDisableClientState(GL_COLOR_ARRAY);
<a name="l00293"></a>00293         glDisableClientState(GL_NORMAL_ARRAY);
<a name="l00294"></a>00294         glDisableClientState(GL_TEXTURE_COORD_ARRAY);
<a name="l00295"></a>00295         glDisableClientState(GL_VERTEX_ARRAY);
<a name="l00296"></a>00296         }
<a name="l00297"></a>00297         <span class="keywordflow">catch</span>(...)
<a name="l00298"></a>00298         {std::cout&lt;&lt;<span class="stringliteral">"error!"</span>&lt;&lt;std::endl;}
<a name="l00299"></a>00299 }
<a name="l00300"></a>00300 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Oct 18 10:41:36 2008 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6 </small></address>
</body>
</html>
